
go.property("monkey", resource.buffer("/example/raytrace/monkey.buffer"))


function init(self)
	
	local src = sys.load_resource("/assets/raytrace.c")
	
	devices = opencl.get_devices(true)
	device = devices[1]
	
	program = device:load_program(src)
	kernel = program:create_kernel("trace_scene")

	local texture = go.get("/go#model", "texture0")
	
	local header = {width = 960, height = 480, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGB}
	local buf = buffer.create(header.width * header.height , { {name = hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local stream = buffer.get_stream(buf, hash("rgb"))

	kernel:set_arg_buffer(1, buf, "rgb", false, true) 

	kernel:set_arg_int(2, header.width) 
	kernel:set_arg_int(3, header.height) 


	local mesh = resource.get_buffer(self.monkey)

	
	kernel:set_arg_buffer(4, mesh, "position", true) 
	kernel:set_arg_buffer(5, mesh, "normal", true) 

	kernel:set_arg_int(6, 968) 

	local sec = kernel:run(2, {header.width, header.height})

	kernel:read(1, header.width * header.height , buf, "rgb")


	resource.set_texture(texture, header, buf)
	
end
