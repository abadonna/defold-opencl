function init(self)

	local buf = buffer.create(10, { -- input data for opencl kernel
		{ name = hash("data1"), type = buffer.VALUE_TYPE_FLOAT32, count = 1 },
		{ name = hash("data2"), type = buffer.VALUE_TYPE_FLOAT32, count = 1 },
		{ name = hash("data_out"), type = buffer.VALUE_TYPE_FLOAT32, count = 1 },
		
		{ name = hash("vectors"), type = buffer.VALUE_TYPE_FLOAT32, count = 3 },
		{ name = hash("vectors_out"), type = buffer.VALUE_TYPE_FLOAT32, count = 3 },
	})

	local tstream1 = buffer.get_stream(buf, hash("data1"))
	local tstream2 = buffer.get_stream(buf, hash("data2"))
	local tstream3 = buffer.get_stream(buf, hash("vectors"))

	for i = 1, 10 do
		tstream1[i] = i;
		tstream2[i] = i * 0.1;
		
		tstream3[(i - 1) * 3 + 1] = math.random(1, 10)
		tstream3[(i - 1) * 3 + 2] = math.random(1, 10)
		tstream3[(i - 1) * 3 + 3] = math.random(1, 10)
		
	end
	
	local src = sys.load_resource("/assets/add.c") -- opencl kernel code
	
	devices = opencl.get_devices()

	for _, device in ipairs(devices) do
		pprint("Calculating on device: " .. device.name)
		
		local program = device:load_program(src)
		local kernel = program:create_kernel("parallel_add")
		
		kernel:set_arg_buffer(1, buf, "data1", true) -- first argument, read only
		kernel:set_arg_buffer(2, buf, "data2", true) --  second argument, read only
		kernel:set_arg_buffer(3, buf, "data_out", false, true) -- third argument, result - write only

		local sec = kernel:run(1, {10})

		pprint("Kernel run in " .. sec .. " seconds")

		pprint(kernel:read(3, 10)) -- read 10 values from 3rd argument (buffer) in kernels
	end

--[[

	local program = devices[2]:load_program(src)
	local kernel = program:create_kernel("norm")
	kernel:set_arg_buffer(1, buf, "vectors", true) 
	kernel:set_arg_buffer(2, buf, "vectors_out", false, true) 
	
	kernel:run(1, {10})
	
	pprint(kernel:read(2, 10))

--]]
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
